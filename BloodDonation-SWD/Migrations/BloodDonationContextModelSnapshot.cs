// <auto-generated />
using System;
using BloodDonation_SWD.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodDonation_SWD.Migrations
{
    [DbContext(typeof(BloodDonationContext))]
    partial class BloodDonationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BloodDonation_SWD.Models.BlogPost", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("category");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Img")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("img");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("PostId")
                        .HasName("PK__BlogPost__3ED787668B69A509");

                    b.HasIndex("UserId");

                    b.ToTable("BlogPost", (string)null);
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.BloodComponent", b =>
                {
                    b.Property<int>("BloodComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("blood_component_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodComponentId"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("BloodComponentId")
                        .HasName("PK__BloodCom__14A61BEFD91EAD6D");

                    b.HasIndex(new[] { "Name" }, "UQ__BloodCom__72E12F1BC76DA3F1")
                        .IsUnique()
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("BloodComponent", (string)null);
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.BloodInventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("inventory_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<int?>("BloodComponentId")
                        .HasColumnType("int")
                        .HasColumnName("blood_component_id");

                    b.Property<int?>("BloodTypeId")
                        .HasColumnType("int")
                        .HasColumnName("blood_type_id");

                    b.Property<string>("InventoryLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("inventory_location");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("unit");

                    b.HasKey("InventoryId")
                        .HasName("PK__BloodInv__B59ACC49359E3CED");

                    b.HasIndex("BloodComponentId");

                    b.HasIndex("BloodTypeId");

                    b.ToTable("BloodInventory", (string)null);
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.BloodRequest", b =>
                {
                    b.Property<int>("BloodRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("blood_request_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodRequestId"));

                    b.Property<int?>("BloodComponentId")
                        .HasColumnType("int")
                        .HasColumnName("blood_component_id");

                    b.Property<int?>("BloodTypeId")
                        .HasColumnType("int")
                        .HasColumnName("blood_type_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Fulfilled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("fulfilled");

                    b.Property<string>("FulfilledSource")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fulfilled_source");

                    b.Property<decimal?>("HeightCm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("height_cm");

                    b.Property<bool?>("IsEmergency")
                        .HasColumnType("bit")
                        .HasColumnName("is_emergency");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("text")
                        .HasColumnName("medical_history");

                    b.Property<string>("PatientCondition")
                        .HasColumnType("text")
                        .HasColumnName("patient_condition");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("ReasonForRequest")
                        .HasColumnType("text")
                        .HasColumnName("reason_for_request");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("status");

                    b.Property<string>("UrgencyLevel")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("urgency_level");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<decimal?>("WeightKg")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("weight_kg");

                    b.HasKey("BloodRequestId")
                        .HasName("PK__BloodReq__0F0E510DE22697BE");

                    b.HasIndex("BloodComponentId");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("BloodRequest", (string)null);
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.BloodRequestInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AllocatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("allocated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("AllocatedBy")
                        .HasColumnType("int")
                        .HasColumnName("allocated_by");

                    b.Property<int?>("BloodRequestId")
                        .HasColumnType("int")
                        .HasColumnName("blood_request_id");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("inventory_id");

                    b.Property<int?>("QuantityAllocated")
                        .HasColumnType("int")
                        .HasColumnName("quantity_allocated");

                    b.Property<int?>("QuantityUnit")
                        .HasColumnType("int")
                        .HasColumnName("quantity_unit");

                    b.HasKey("Id")
                        .HasName("PK__BloodReq__3213E83F6F3F0B08");

                    b.HasIndex("AllocatedBy");

                    b.HasIndex("BloodRequestId");

                    b.HasIndex("InventoryId");

                    b.ToTable("BloodRequestInventory", (string)null);
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.BloodType", b =>
                {
                    b.Property<int>("BloodTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("blood_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodTypeId"));

                    b.Property<string>("Name")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("name");

                    b.Property<string>("RhFactor")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("rh_factor");

                    b.HasKey("BloodTypeId")
                        .HasName("PK__BloodTyp__56FFB8C8F2AED018");

                    b.ToTable("BloodType", (string)null);
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.DonationHistory", b =>
                {
                    b.Property<int>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("donation_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonationId"));

                    b.Property<int?>("BloodComponentId")
                        .HasColumnType("int")
                        .HasColumnName("blood_component_id");

                    b.Property<int?>("BloodTypeId")
                        .HasColumnType("int")
                        .HasColumnName("blood_type_id");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("status");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int?>("VolumeMl")
                        .HasColumnType("int")
                        .HasColumnName("volume_ml");

                    b.HasKey("DonationId")
                        .HasName("PK__Donation__296B91DCE12F47BB");

                    b.HasIndex("BloodComponentId");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("DonationHistory", (string)null);
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.DonationRequest", b =>
                {
                    b.Property<int>("DonateRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("donate_request_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonateRequestId"));

                    b.Property<int?>("BloodComponentId")
                        .HasColumnType("int")
                        .HasColumnName("blood_component_id");

                    b.Property<string>("BloodPressure")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("blood_pressure");

                    b.Property<int?>("BloodTypeId")
                        .HasColumnType("int")
                        .HasColumnName("blood_type_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("GeneralHealthStatus")
                        .HasColumnType("text")
                        .HasColumnName("general_health_status");

                    b.Property<decimal?>("HeightCm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("height_cm");

                    b.Property<decimal?>("HemoglobinLevel")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("hemoglobin_level");

                    b.Property<DateOnly?>("LastDonationDate")
                        .HasColumnType("date")
                        .HasColumnName("last_donation_date");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("text")
                        .HasColumnName("medical_history");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<DateOnly?>("PreferredDate")
                        .HasColumnType("date")
                        .HasColumnName("preferred_date");

                    b.Property<int?>("PulseRate")
                        .HasColumnType("int")
                        .HasColumnName("pulse_rate");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("status");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<decimal?>("WeightKg")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("weight_kg");

                    b.HasKey("DonateRequestId")
                        .HasName("PK__Donation__D517757ABCD67DE3");

                    b.HasIndex("BloodComponentId");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("DonationRequest", (string)null);
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime?>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("sent_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__E059842F40F16515");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.RequestMatch", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("match_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchId"));

                    b.Property<int?>("BloodRequestId")
                        .HasColumnType("int")
                        .HasColumnName("blood_request_id");

                    b.Property<int?>("DonationRequestId")
                        .HasColumnType("int")
                        .HasColumnName("donation_request_id");

                    b.Property<string>("MatchStatus")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("match_status");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateOnly?>("ScheduledDate")
                        .HasColumnType("date")
                        .HasColumnName("scheduled_date");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("type");

                    b.HasKey("MatchId")
                        .HasName("PK__RequestM__9D7FCBA3366FE302");

                    b.HasIndex("BloodRequestId");

                    b.HasIndex("DonationRequestId");

                    b.ToTable("RequestMatch", (string)null);
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<int?>("BloodComponentId")
                        .HasColumnType("int")
                        .HasColumnName("blood_component_id");

                    b.Property<int?>("BloodTypeId")
                        .HasColumnType("int")
                        .HasColumnName("blood_type_id");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Identification")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("identification");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("status");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_name");

                    b.HasKey("UserId")
                        .HasName("PK__User__B9BE370F82B4A317");

                    b.HasIndex("BloodComponentId");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex(new[] { "Identification" }, "UQ__User__AAA7C1F571AA5E41")
                        .IsUnique()
                        .HasFilter("[identification] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "UQ__User__AB6E616478514D0E")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.BlogPost", b =>
                {
                    b.HasOne("BloodDonation_SWD.Models.User", "User")
                        .WithMany("BlogPosts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__BlogPost__user_i__6EF57B66");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.BloodInventory", b =>
                {
                    b.HasOne("BloodDonation_SWD.Models.BloodComponent", "BloodComponent")
                        .WithMany("BloodInventories")
                        .HasForeignKey("BloodComponentId")
                        .HasConstraintName("FK__BloodInve__blood__5AEE82B9");

                    b.HasOne("BloodDonation_SWD.Models.BloodType", "BloodType")
                        .WithMany("BloodInventories")
                        .HasForeignKey("BloodTypeId")
                        .HasConstraintName("FK__BloodInve__blood__59FA5E80");

                    b.Navigation("BloodComponent");

                    b.Navigation("BloodType");
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.BloodRequest", b =>
                {
                    b.HasOne("BloodDonation_SWD.Models.BloodComponent", "BloodComponent")
                        .WithMany("BloodRequests")
                        .HasForeignKey("BloodComponentId")
                        .HasConstraintName("FK__BloodRequ__blood__534D60F1");

                    b.HasOne("BloodDonation_SWD.Models.BloodType", "BloodType")
                        .WithMany("BloodRequests")
                        .HasForeignKey("BloodTypeId")
                        .HasConstraintName("FK__BloodRequ__blood__52593CB8");

                    b.HasOne("BloodDonation_SWD.Models.User", "User")
                        .WithMany("BloodRequests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__BloodRequ__user___5165187F");

                    b.Navigation("BloodComponent");

                    b.Navigation("BloodType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.BloodRequestInventory", b =>
                {
                    b.HasOne("BloodDonation_SWD.Models.User", "AllocatedByNavigation")
                        .WithMany("BloodRequestInventories")
                        .HasForeignKey("AllocatedBy")
                        .HasConstraintName("FK__BloodRequ__alloc__619B8048");

                    b.HasOne("BloodDonation_SWD.Models.BloodRequest", "BloodRequest")
                        .WithMany("BloodRequestInventories")
                        .HasForeignKey("BloodRequestId")
                        .HasConstraintName("FK__BloodRequ__blood__5EBF139D");

                    b.HasOne("BloodDonation_SWD.Models.BloodInventory", "Inventory")
                        .WithMany("BloodRequestInventories")
                        .HasForeignKey("InventoryId")
                        .HasConstraintName("FK__BloodRequ__inven__5FB337D6");

                    b.Navigation("AllocatedByNavigation");

                    b.Navigation("BloodRequest");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.DonationHistory", b =>
                {
                    b.HasOne("BloodDonation_SWD.Models.BloodComponent", "BloodComponent")
                        .WithMany("DonationHistories")
                        .HasForeignKey("BloodComponentId")
                        .HasConstraintName("FK__DonationH__blood__46E78A0C");

                    b.HasOne("BloodDonation_SWD.Models.BloodType", "BloodType")
                        .WithMany("DonationHistories")
                        .HasForeignKey("BloodTypeId")
                        .HasConstraintName("FK__DonationH__blood__45F365D3");

                    b.HasOne("BloodDonation_SWD.Models.User", "User")
                        .WithMany("DonationHistories")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__DonationH__user___44FF419A");

                    b.Navigation("BloodComponent");

                    b.Navigation("BloodType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.DonationRequest", b =>
                {
                    b.HasOne("BloodDonation_SWD.Models.BloodComponent", "BloodComponent")
                        .WithMany("DonationRequests")
                        .HasForeignKey("BloodComponentId")
                        .HasConstraintName("FK__DonationR__blood__4CA06362");

                    b.HasOne("BloodDonation_SWD.Models.BloodType", "BloodType")
                        .WithMany("DonationRequests")
                        .HasForeignKey("BloodTypeId")
                        .HasConstraintName("FK__DonationR__blood__4BAC3F29");

                    b.HasOne("BloodDonation_SWD.Models.User", "User")
                        .WithMany("DonationRequests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__DonationR__user___4AB81AF0");

                    b.Navigation("BloodComponent");

                    b.Navigation("BloodType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.Notification", b =>
                {
                    b.HasOne("BloodDonation_SWD.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Notificat__user___6A30C649");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.RequestMatch", b =>
                {
                    b.HasOne("BloodDonation_SWD.Models.BloodRequest", "BloodRequest")
                        .WithMany("RequestMatches")
                        .HasForeignKey("BloodRequestId")
                        .HasConstraintName("FK__RequestMa__blood__6477ECF3");

                    b.HasOne("BloodDonation_SWD.Models.DonationRequest", "DonationRequest")
                        .WithMany("RequestMatches")
                        .HasForeignKey("DonationRequestId")
                        .HasConstraintName("FK__RequestMa__donat__656C112C");

                    b.Navigation("BloodRequest");

                    b.Navigation("DonationRequest");
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.User", b =>
                {
                    b.HasOne("BloodDonation_SWD.Models.BloodComponent", "BloodComponent")
                        .WithMany("Users")
                        .HasForeignKey("BloodComponentId")
                        .HasConstraintName("FK__User__blood_comp__403A8C7D");

                    b.HasOne("BloodDonation_SWD.Models.BloodType", "BloodType")
                        .WithMany("Users")
                        .HasForeignKey("BloodTypeId")
                        .HasConstraintName("FK__User__blood_type__3F466844");

                    b.Navigation("BloodComponent");

                    b.Navigation("BloodType");
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.BloodComponent", b =>
                {
                    b.Navigation("BloodInventories");

                    b.Navigation("BloodRequests");

                    b.Navigation("DonationHistories");

                    b.Navigation("DonationRequests");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.BloodInventory", b =>
                {
                    b.Navigation("BloodRequestInventories");
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.BloodRequest", b =>
                {
                    b.Navigation("BloodRequestInventories");

                    b.Navigation("RequestMatches");
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.BloodType", b =>
                {
                    b.Navigation("BloodInventories");

                    b.Navigation("BloodRequests");

                    b.Navigation("DonationHistories");

                    b.Navigation("DonationRequests");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.DonationRequest", b =>
                {
                    b.Navigation("RequestMatches");
                });

            modelBuilder.Entity("BloodDonation_SWD.Models.User", b =>
                {
                    b.Navigation("BlogPosts");

                    b.Navigation("BloodRequestInventories");

                    b.Navigation("BloodRequests");

                    b.Navigation("DonationHistories");

                    b.Navigation("DonationRequests");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
